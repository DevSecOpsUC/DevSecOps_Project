name: SonarCloud - Unidad 1 (.NET)

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonar-dotnet:
    runs-on: ubuntu-latest
    name: SonarCloud Analysis (.NET Unidad 1)
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Cache Sonar Scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install dotnet-sonarscanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p "${RUNNER_TEMP}/scanner"
          dotnet tool install dotnet-sonarscanner --version 5.* --tool-path "${RUNNER_TEMP}/scanner"

      - name: Validate SONAR_TOKEN
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          status=$(curl -s -o /dev/null -w "%{http_code}" -u "${SONAR_TOKEN}:" https://sonarcloud.io/api/authentication/validate || true)
          if [ "$status" != "200" ]; then
            echo "ERROR: SONAR_TOKEN invalid or not authorized (HTTP $status)"
            exit 1
          fi
          echo "SONAR_TOKEN OK."

      - name: Begin SonarCloud analysis
        env:
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        working-directory: Unidad1_AsegurandoCodigoFuente
        run: |
          SCANNER="${RUNNER_TEMP}/scanner/dotnet-sonarscanner"
          "$SCANNER" begin /k:"$SONAR_PROJECT_KEY" /o:"$SONAR_ORGANIZATION" /d:sonar.login="$SONAR_TOKEN" /d:sonar.host.url="https://sonarcloud.io"

      - name: Restore & Build
        working-directory: Unidad1_AsegurandoCodigoFuente
        run: |
          if ls *.sln 1> /dev/null 2>&1; then
            dotnet restore
            dotnet build --configuration Release
          fi

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        working-directory: Unidad1_AsegurandoCodigoFuente
        run: |
          SCANNER="${RUNNER_TEMP}/scanner/dotnet-sonarscanner"
          "$SCANNER" end /d:sonar.login="$SONAR_TOKEN"
