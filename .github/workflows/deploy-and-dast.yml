name: Deploy containers and DAST Scan

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  RG_NAME: rg-devsecopsuc
  ACR_NAME: devsecopsucacr
  WEBAPP_NAME: webapp-devsecopsuc
  LOCATION: eastus

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy Containers to Azure

    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4

      - name: üîë Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üß± Ensure Resource Group and ACR exist
        run: |
          az group create -n $RG_NAME -l $LOCATION || true
          az acr show -n $ACR_NAME -g $RG_NAME || \
          az acr create -n $ACR_NAME -g $RG_NAME --sku Basic --admin-enabled true

      - name: üîê Login to ACR
        run: az acr login --name $ACR_NAME

      # Build & push .NET microservices
      - name: üß± Build and push auth-service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Unidad2_DespliegueSeguro/docker/Dockerfile.auth
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/auth-service:latest

      - name: üß± Build and push rooms-service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Unidad2_DespliegueSeguro/docker/Dockerfile.rooms
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/rooms-service:latest

      # Build & push frontend (Nginx)
      - name: üß± Build and push frontend-web
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Unidad2_DespliegueSeguro/docker/Dockerfile.frontend
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/frontend-web:latest

      - name: üîê Configure ACR credentials for WebApp
        run: |
          ACR_USER=$(az acr credential show -n $ACR_NAME --query "username" -o tsv)
          ACR_PASS=$(az acr credential show -n $ACR_NAME --query "passwords[0].value" -o tsv)
          az webapp config container set \
            --name $WEBAPP_NAME \
            --resource-group $RG_NAME \
            --docker-registry-server-user $ACR_USER \
            --docker-registry-server-password $ACR_PASS \
            --docker-registry-server-url https://$ACR_NAME.azurecr.io

      - name: üöÄ Configure Azure WebApp with Docker Compose
        run: |
          az webapp config container set \
            --name $WEBAPP_NAME \
            --resource-group $RG_NAME \
            --multicontainer-config-type compose \
            --multicontainer-config-file Unidad2_DespliegueSeguro/docker/docker-compose.azure.yml

  dast-scan:
    runs-on: ubuntu-latest
    name: OWASP ZAP DAST Scan
    needs: build-and-deploy

    steps:
      - name: üîπ Checkout repo
        uses: actions/checkout@v4

      - name: üß∞ Prepare environment
        run: |
          sudo systemctl start docker
          mkdir -p zap-output
          sudo chmod -R 777 zap-output

      - name: üß™ Run OWASP ZAP Baseline Scan
        run: |
          docker pull ghcr.io/zaproxy/zaproxy:stable
          docker run --rm \
            -v $GITHUB_WORKSPACE/zap-output:/zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
              -t https://${{ env.WEBAPP_NAME }}.azurewebsites.net/api/rooms \
              -r zap_report.html \
              -J zap_report.json \
              -w zap_report.md \
              -a || true

      - name: üì§ Upload ZAP Reports
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: ZAP-DAST-Reports
          path: zap-output
